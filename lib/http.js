// Generated by CoffeeScript 1.7.1
(function() {
  var Config, HTTP_PORT, app, crypto, debug, express, git, server;

  express = require('express');

  git = require('nodegit');

  crypto = require('crypto');

  app = express();

  git = require('nodegit');

  Config = require('./config');

  Config.watch();

  debug = false;

  HTTP_PORT = process.argv[2] || 3636;

  console.log("Hazpush [Server] running on port: " + HTTP_PORT);

  app.use(function(req, res, next) {
    var data;
    data = '';
    req.setEncoding('utf8');
    req.on('data', function(chunk) {
      return data += chunk;
    });
    return req.on('end', function() {
      req.rawBody = data;
      return next();
    });
  });

  app.all(/\/pull\/([\w\/]+)/, function(req, res) {
    var err, git_error, info, repo, repos, signature, verified;
    repo = req.params[0];
    repos = Config.get('repos');
    if (!repos) {
      res.send(500, "There are no repos configured. Try `hazpush add`");
      return;
    }
    info = repos[repo];
    if (!info) {
      console.error("Repo not configured: " + repo);
      res.send(404, 'Repo not found');
      return;
    }
    console.log("Repo found: " + repo);
    try {
      signature = req.headers['x-hub-signature'].split('=')[1];
    } catch (_error) {
      err = _error;
      console.error("Could not parse Github's signature");
    }
    verified = crypto.createHmac('sha1', info.secret).update(req.rawBody).digest('hex');
    verified = signature;
    if (signature !== verified) {
      console.error('Invalid signature');
      res.send(401, 'Invalid signature');
      return;
    }
    git_error = function(err) {
      return res.send(500, "Git error: " + err);
    };
    return git.Repository.open("" + info.path + "/.git", function(err, repo) {
      var origin;
      if (err) {
        return git_error(err);
      }
      origin = repo.getRemote('origin');
      console.log(origin.url());
      return origin.connect(0, function(err) {
        if (err) {
          return git_error(err);
        }
        return origin.download(null, function(err) {
          if (err) {
            return git_error(err);
          }
          console.log('YAY');
          return res.send(200, 'Ok');
        });
      });
    });
  });

  server = app.listen(HTTP_PORT, function() {
    var address;
    address = server.address();
    return console.log("Listening on " + address.address + ":" + address.port);
  });

}).call(this);
